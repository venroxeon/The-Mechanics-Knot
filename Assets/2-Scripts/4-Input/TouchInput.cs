//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/2-Scripts/4-Input/TouchInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInput"",
    ""maps"": [
        {
            ""name"": ""TouchInputs"",
            ""id"": ""93d4a65e-4d9a-4135-be57-5daa6e1f547c"",
            ""actions"": [
                {
                    ""name"": ""FirstTouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""b8c46989-9568-4e3b-8569-cc1625e1dbc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstTouchPos"",
                    ""type"": ""Value"",
                    ""id"": ""0a791eb5-2fea-4238-a992-d31ac39a8101"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondTouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""5d50d754-3995-4b1c-8e1c-94274be853a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondTouchPos"",
                    ""type"": ""Value"",
                    ""id"": ""400e1e49-b735-4495-a2d1-6c857e0f352c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a1f5c97e-0770-4bbf-8bd9-bebdc78d6b3e"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc9790e3-9742-41bc-b71a-c8857f68fa91"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b5e747b-e953-491f-ab88-6c775b24b745"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouchPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b629564-509d-48e8-92c9-591e522f1d0e"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchInputs
        m_TouchInputs = asset.FindActionMap("TouchInputs", throwIfNotFound: true);
        m_TouchInputs_FirstTouchPress = m_TouchInputs.FindAction("FirstTouchPress", throwIfNotFound: true);
        m_TouchInputs_FirstTouchPos = m_TouchInputs.FindAction("FirstTouchPos", throwIfNotFound: true);
        m_TouchInputs_SecondTouchPress = m_TouchInputs.FindAction("SecondTouchPress", throwIfNotFound: true);
        m_TouchInputs_SecondTouchPos = m_TouchInputs.FindAction("SecondTouchPos", throwIfNotFound: true);
    }

    ~@TouchInput()
    {
        UnityEngine.Debug.Assert(!m_TouchInputs.enabled, "This will cause a leak and performance issues, TouchInput.TouchInputs.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchInputs
    private readonly InputActionMap m_TouchInputs;
    private List<ITouchInputsActions> m_TouchInputsActionsCallbackInterfaces = new List<ITouchInputsActions>();
    private readonly InputAction m_TouchInputs_FirstTouchPress;
    private readonly InputAction m_TouchInputs_FirstTouchPos;
    private readonly InputAction m_TouchInputs_SecondTouchPress;
    private readonly InputAction m_TouchInputs_SecondTouchPos;
    public struct TouchInputsActions
    {
        private @TouchInput m_Wrapper;
        public TouchInputsActions(@TouchInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstTouchPress => m_Wrapper.m_TouchInputs_FirstTouchPress;
        public InputAction @FirstTouchPos => m_Wrapper.m_TouchInputs_FirstTouchPos;
        public InputAction @SecondTouchPress => m_Wrapper.m_TouchInputs_SecondTouchPress;
        public InputAction @SecondTouchPos => m_Wrapper.m_TouchInputs_SecondTouchPos;
        public InputActionMap Get() { return m_Wrapper.m_TouchInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchInputsActions set) { return set.Get(); }
        public void AddCallbacks(ITouchInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchInputsActionsCallbackInterfaces.Add(instance);
            @FirstTouchPress.started += instance.OnFirstTouchPress;
            @FirstTouchPress.performed += instance.OnFirstTouchPress;
            @FirstTouchPress.canceled += instance.OnFirstTouchPress;
            @FirstTouchPos.started += instance.OnFirstTouchPos;
            @FirstTouchPos.performed += instance.OnFirstTouchPos;
            @FirstTouchPos.canceled += instance.OnFirstTouchPos;
            @SecondTouchPress.started += instance.OnSecondTouchPress;
            @SecondTouchPress.performed += instance.OnSecondTouchPress;
            @SecondTouchPress.canceled += instance.OnSecondTouchPress;
            @SecondTouchPos.started += instance.OnSecondTouchPos;
            @SecondTouchPos.performed += instance.OnSecondTouchPos;
            @SecondTouchPos.canceled += instance.OnSecondTouchPos;
        }

        private void UnregisterCallbacks(ITouchInputsActions instance)
        {
            @FirstTouchPress.started -= instance.OnFirstTouchPress;
            @FirstTouchPress.performed -= instance.OnFirstTouchPress;
            @FirstTouchPress.canceled -= instance.OnFirstTouchPress;
            @FirstTouchPos.started -= instance.OnFirstTouchPos;
            @FirstTouchPos.performed -= instance.OnFirstTouchPos;
            @FirstTouchPos.canceled -= instance.OnFirstTouchPos;
            @SecondTouchPress.started -= instance.OnSecondTouchPress;
            @SecondTouchPress.performed -= instance.OnSecondTouchPress;
            @SecondTouchPress.canceled -= instance.OnSecondTouchPress;
            @SecondTouchPos.started -= instance.OnSecondTouchPos;
            @SecondTouchPos.performed -= instance.OnSecondTouchPos;
            @SecondTouchPos.canceled -= instance.OnSecondTouchPos;
        }

        public void RemoveCallbacks(ITouchInputsActions instance)
        {
            if (m_Wrapper.m_TouchInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchInputsActions @TouchInputs => new TouchInputsActions(this);
    public interface ITouchInputsActions
    {
        void OnFirstTouchPress(InputAction.CallbackContext context);
        void OnFirstTouchPos(InputAction.CallbackContext context);
        void OnSecondTouchPress(InputAction.CallbackContext context);
        void OnSecondTouchPos(InputAction.CallbackContext context);
    }
}
